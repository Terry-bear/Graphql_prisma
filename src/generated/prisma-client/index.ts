// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  authUser: (where?: AuthUserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  authUser: (where: AuthUserWhereUniqueInput) => AuthUserPromise;
  authUsers: (
    args?: {
      where?: AuthUserWhereInput;
      orderBy?: AuthUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AuthUser>;
  authUsersConnection: (
    args?: {
      where?: AuthUserWhereInput;
      orderBy?: AuthUserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AuthUserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAuthUser: (data: AuthUserCreateInput) => AuthUserPromise;
  updateAuthUser: (
    args: { data: AuthUserUpdateInput; where: AuthUserWhereUniqueInput }
  ) => AuthUserPromise;
  updateManyAuthUsers: (
    args: { data: AuthUserUpdateManyMutationInput; where?: AuthUserWhereInput }
  ) => BatchPayloadPromise;
  upsertAuthUser: (
    args: {
      where: AuthUserWhereUniqueInput;
      create: AuthUserCreateInput;
      update: AuthUserUpdateInput;
    }
  ) => AuthUserPromise;
  deleteAuthUser: (where: AuthUserWhereUniqueInput) => AuthUserPromise;
  deleteManyAuthUsers: (where?: AuthUserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  authUser: (
    where?: AuthUserSubscriptionWhereInput
  ) => AuthUserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "mobileNo_ASC"
  | "mobileNo_DESC"
  | "idCard_ASC"
  | "idCard_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "lastLoginDate_ASC"
  | "lastLoginDate_DESC"
  | "lastResetDate_ASC"
  | "lastResetDate_DESC"
  | "name_ASC"
  | "name_DESC"
  | "certifiedStatus_ASC"
  | "certifiedStatus_DESC"
  | "headpic_ASC"
  | "headpic_DESC"
  | "kongKey_ASC"
  | "kongKey_DESC"
  | "kongId_ASC"
  | "kongId_DESC"
  | "accessKey_ASC"
  | "accessKey_DESC"
  | "accessId_ASC"
  | "accessId_DESC"
  | "passWord_ASC"
  | "passWord_DESC"
  | "lesseeId_ASC"
  | "lesseeId_DESC"
  | "wxopenId_ASC"
  | "wxopenId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AuthUserCreateInput {
  mobileNo?: String;
  idCard?: String;
  userName: String;
  email?: String;
  lastLoginDate?: String;
  lastResetDate?: String;
  name?: String;
  certifiedStatus?: Int;
  headpic?: String;
  kongKey?: String;
  kongId?: String;
  accessKey?: String;
  accessId?: String;
  passWord?: String;
  lesseeId?: String;
  wxopenId?: String;
}

export interface AuthUserUpdateInput {
  mobileNo?: String;
  idCard?: String;
  userName?: String;
  email?: String;
  lastLoginDate?: String;
  lastResetDate?: String;
  name?: String;
  certifiedStatus?: Int;
  headpic?: String;
  kongKey?: String;
  kongId?: String;
  accessKey?: String;
  accessId?: String;
  passWord?: String;
  lesseeId?: String;
  wxopenId?: String;
}

export interface AuthUserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  mobileNo?: String;
  mobileNo_not?: String;
  mobileNo_in?: String[] | String;
  mobileNo_not_in?: String[] | String;
  mobileNo_lt?: String;
  mobileNo_lte?: String;
  mobileNo_gt?: String;
  mobileNo_gte?: String;
  mobileNo_contains?: String;
  mobileNo_not_contains?: String;
  mobileNo_starts_with?: String;
  mobileNo_not_starts_with?: String;
  mobileNo_ends_with?: String;
  mobileNo_not_ends_with?: String;
  idCard?: String;
  idCard_not?: String;
  idCard_in?: String[] | String;
  idCard_not_in?: String[] | String;
  idCard_lt?: String;
  idCard_lte?: String;
  idCard_gt?: String;
  idCard_gte?: String;
  idCard_contains?: String;
  idCard_not_contains?: String;
  idCard_starts_with?: String;
  idCard_not_starts_with?: String;
  idCard_ends_with?: String;
  idCard_not_ends_with?: String;
  userName?: String;
  userName_not?: String;
  userName_in?: String[] | String;
  userName_not_in?: String[] | String;
  userName_lt?: String;
  userName_lte?: String;
  userName_gt?: String;
  userName_gte?: String;
  userName_contains?: String;
  userName_not_contains?: String;
  userName_starts_with?: String;
  userName_not_starts_with?: String;
  userName_ends_with?: String;
  userName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  lastLoginDate?: String;
  lastLoginDate_not?: String;
  lastLoginDate_in?: String[] | String;
  lastLoginDate_not_in?: String[] | String;
  lastLoginDate_lt?: String;
  lastLoginDate_lte?: String;
  lastLoginDate_gt?: String;
  lastLoginDate_gte?: String;
  lastLoginDate_contains?: String;
  lastLoginDate_not_contains?: String;
  lastLoginDate_starts_with?: String;
  lastLoginDate_not_starts_with?: String;
  lastLoginDate_ends_with?: String;
  lastLoginDate_not_ends_with?: String;
  lastResetDate?: String;
  lastResetDate_not?: String;
  lastResetDate_in?: String[] | String;
  lastResetDate_not_in?: String[] | String;
  lastResetDate_lt?: String;
  lastResetDate_lte?: String;
  lastResetDate_gt?: String;
  lastResetDate_gte?: String;
  lastResetDate_contains?: String;
  lastResetDate_not_contains?: String;
  lastResetDate_starts_with?: String;
  lastResetDate_not_starts_with?: String;
  lastResetDate_ends_with?: String;
  lastResetDate_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  certifiedStatus?: Int;
  certifiedStatus_not?: Int;
  certifiedStatus_in?: Int[] | Int;
  certifiedStatus_not_in?: Int[] | Int;
  certifiedStatus_lt?: Int;
  certifiedStatus_lte?: Int;
  certifiedStatus_gt?: Int;
  certifiedStatus_gte?: Int;
  headpic?: String;
  headpic_not?: String;
  headpic_in?: String[] | String;
  headpic_not_in?: String[] | String;
  headpic_lt?: String;
  headpic_lte?: String;
  headpic_gt?: String;
  headpic_gte?: String;
  headpic_contains?: String;
  headpic_not_contains?: String;
  headpic_starts_with?: String;
  headpic_not_starts_with?: String;
  headpic_ends_with?: String;
  headpic_not_ends_with?: String;
  kongKey?: String;
  kongKey_not?: String;
  kongKey_in?: String[] | String;
  kongKey_not_in?: String[] | String;
  kongKey_lt?: String;
  kongKey_lte?: String;
  kongKey_gt?: String;
  kongKey_gte?: String;
  kongKey_contains?: String;
  kongKey_not_contains?: String;
  kongKey_starts_with?: String;
  kongKey_not_starts_with?: String;
  kongKey_ends_with?: String;
  kongKey_not_ends_with?: String;
  kongId?: String;
  kongId_not?: String;
  kongId_in?: String[] | String;
  kongId_not_in?: String[] | String;
  kongId_lt?: String;
  kongId_lte?: String;
  kongId_gt?: String;
  kongId_gte?: String;
  kongId_contains?: String;
  kongId_not_contains?: String;
  kongId_starts_with?: String;
  kongId_not_starts_with?: String;
  kongId_ends_with?: String;
  kongId_not_ends_with?: String;
  accessKey?: String;
  accessKey_not?: String;
  accessKey_in?: String[] | String;
  accessKey_not_in?: String[] | String;
  accessKey_lt?: String;
  accessKey_lte?: String;
  accessKey_gt?: String;
  accessKey_gte?: String;
  accessKey_contains?: String;
  accessKey_not_contains?: String;
  accessKey_starts_with?: String;
  accessKey_not_starts_with?: String;
  accessKey_ends_with?: String;
  accessKey_not_ends_with?: String;
  accessId?: String;
  accessId_not?: String;
  accessId_in?: String[] | String;
  accessId_not_in?: String[] | String;
  accessId_lt?: String;
  accessId_lte?: String;
  accessId_gt?: String;
  accessId_gte?: String;
  accessId_contains?: String;
  accessId_not_contains?: String;
  accessId_starts_with?: String;
  accessId_not_starts_with?: String;
  accessId_ends_with?: String;
  accessId_not_ends_with?: String;
  passWord?: String;
  passWord_not?: String;
  passWord_in?: String[] | String;
  passWord_not_in?: String[] | String;
  passWord_lt?: String;
  passWord_lte?: String;
  passWord_gt?: String;
  passWord_gte?: String;
  passWord_contains?: String;
  passWord_not_contains?: String;
  passWord_starts_with?: String;
  passWord_not_starts_with?: String;
  passWord_ends_with?: String;
  passWord_not_ends_with?: String;
  lesseeId?: String;
  lesseeId_not?: String;
  lesseeId_in?: String[] | String;
  lesseeId_not_in?: String[] | String;
  lesseeId_lt?: String;
  lesseeId_lte?: String;
  lesseeId_gt?: String;
  lesseeId_gte?: String;
  lesseeId_contains?: String;
  lesseeId_not_contains?: String;
  lesseeId_starts_with?: String;
  lesseeId_not_starts_with?: String;
  lesseeId_ends_with?: String;
  lesseeId_not_ends_with?: String;
  wxopenId?: String;
  wxopenId_not?: String;
  wxopenId_in?: String[] | String;
  wxopenId_not_in?: String[] | String;
  wxopenId_lt?: String;
  wxopenId_lte?: String;
  wxopenId_gt?: String;
  wxopenId_gte?: String;
  wxopenId_contains?: String;
  wxopenId_not_contains?: String;
  wxopenId_starts_with?: String;
  wxopenId_not_starts_with?: String;
  wxopenId_ends_with?: String;
  wxopenId_not_ends_with?: String;
  AND?: AuthUserWhereInput[] | AuthUserWhereInput;
  OR?: AuthUserWhereInput[] | AuthUserWhereInput;
  NOT?: AuthUserWhereInput[] | AuthUserWhereInput;
}

export interface AuthUserUpdateManyMutationInput {
  mobileNo?: String;
  idCard?: String;
  userName?: String;
  email?: String;
  lastLoginDate?: String;
  lastResetDate?: String;
  name?: String;
  certifiedStatus?: Int;
  headpic?: String;
  kongKey?: String;
  kongId?: String;
  accessKey?: String;
  accessId?: String;
  passWord?: String;
  lesseeId?: String;
  wxopenId?: String;
}

export interface AuthUserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AuthUserWhereInput;
  AND?: AuthUserSubscriptionWhereInput[] | AuthUserSubscriptionWhereInput;
  OR?: AuthUserSubscriptionWhereInput[] | AuthUserSubscriptionWhereInput;
  NOT?: AuthUserSubscriptionWhereInput[] | AuthUserSubscriptionWhereInput;
}

export type AuthUserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  mobileNo?: String;
  idCard?: String;
  userName?: String;
  email?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateAuthUser {
  count: Int;
}

export interface AggregateAuthUserPromise
  extends Promise<AggregateAuthUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthUserSubscription
  extends Promise<AsyncIterator<AggregateAuthUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AuthUserPreviousValues {
  id: ID_Output;
  mobileNo?: String;
  idCard?: String;
  userName: String;
  email?: String;
  lastLoginDate?: String;
  lastResetDate?: String;
  name?: String;
  certifiedStatus?: Int;
  headpic?: String;
  kongKey?: String;
  kongId?: String;
  accessKey?: String;
  accessId?: String;
  passWord?: String;
  lesseeId?: String;
  wxopenId?: String;
}

export interface AuthUserPreviousValuesPromise
  extends Promise<AuthUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mobileNo: () => Promise<String>;
  idCard: () => Promise<String>;
  userName: () => Promise<String>;
  email: () => Promise<String>;
  lastLoginDate: () => Promise<String>;
  lastResetDate: () => Promise<String>;
  name: () => Promise<String>;
  certifiedStatus: () => Promise<Int>;
  headpic: () => Promise<String>;
  kongKey: () => Promise<String>;
  kongId: () => Promise<String>;
  accessKey: () => Promise<String>;
  accessId: () => Promise<String>;
  passWord: () => Promise<String>;
  lesseeId: () => Promise<String>;
  wxopenId: () => Promise<String>;
}

export interface AuthUserPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mobileNo: () => Promise<AsyncIterator<String>>;
  idCard: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  lastLoginDate: () => Promise<AsyncIterator<String>>;
  lastResetDate: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  certifiedStatus: () => Promise<AsyncIterator<Int>>;
  headpic: () => Promise<AsyncIterator<String>>;
  kongKey: () => Promise<AsyncIterator<String>>;
  kongId: () => Promise<AsyncIterator<String>>;
  accessKey: () => Promise<AsyncIterator<String>>;
  accessId: () => Promise<AsyncIterator<String>>;
  passWord: () => Promise<AsyncIterator<String>>;
  lesseeId: () => Promise<AsyncIterator<String>>;
  wxopenId: () => Promise<AsyncIterator<String>>;
}

export interface AuthUserEdge {
  node: AuthUser;
  cursor: String;
}

export interface AuthUserEdgePromise
  extends Promise<AuthUserEdge>,
    Fragmentable {
  node: <T = AuthUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthUserEdgeSubscription
  extends Promise<AsyncIterator<AuthUserEdge>>,
    Fragmentable {
  node: <T = AuthUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthUserSubscriptionPayload {
  mutation: MutationType;
  node: AuthUser;
  updatedFields: String[];
  previousValues: AuthUserPreviousValues;
}

export interface AuthUserSubscriptionPayloadPromise
  extends Promise<AuthUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthUserPreviousValuesPromise>() => T;
}

export interface AuthUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthUserPreviousValuesSubscription>() => T;
}

export interface AuthUser {
  id: ID_Output;
  mobileNo?: String;
  idCard?: String;
  userName: String;
  email?: String;
  lastLoginDate?: String;
  lastResetDate?: String;
  name?: String;
  certifiedStatus?: Int;
  headpic?: String;
  kongKey?: String;
  kongId?: String;
  accessKey?: String;
  accessId?: String;
  passWord?: String;
  lesseeId?: String;
  wxopenId?: String;
}

export interface AuthUserPromise extends Promise<AuthUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  mobileNo: () => Promise<String>;
  idCard: () => Promise<String>;
  userName: () => Promise<String>;
  email: () => Promise<String>;
  lastLoginDate: () => Promise<String>;
  lastResetDate: () => Promise<String>;
  name: () => Promise<String>;
  certifiedStatus: () => Promise<Int>;
  headpic: () => Promise<String>;
  kongKey: () => Promise<String>;
  kongId: () => Promise<String>;
  accessKey: () => Promise<String>;
  accessId: () => Promise<String>;
  passWord: () => Promise<String>;
  lesseeId: () => Promise<String>;
  wxopenId: () => Promise<String>;
}

export interface AuthUserSubscription
  extends Promise<AsyncIterator<AuthUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mobileNo: () => Promise<AsyncIterator<String>>;
  idCard: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  lastLoginDate: () => Promise<AsyncIterator<String>>;
  lastResetDate: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  certifiedStatus: () => Promise<AsyncIterator<Int>>;
  headpic: () => Promise<AsyncIterator<String>>;
  kongKey: () => Promise<AsyncIterator<String>>;
  kongId: () => Promise<AsyncIterator<String>>;
  accessKey: () => Promise<AsyncIterator<String>>;
  accessId: () => Promise<AsyncIterator<String>>;
  passWord: () => Promise<AsyncIterator<String>>;
  lesseeId: () => Promise<AsyncIterator<String>>;
  wxopenId: () => Promise<AsyncIterator<String>>;
}

export interface AuthUserConnection {
  pageInfo: PageInfo;
  edges: AuthUserEdge[];
}

export interface AuthUserConnectionPromise
  extends Promise<AuthUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthUserEdge>>() => T;
  aggregate: <T = AggregateAuthUserPromise>() => T;
}

export interface AuthUserConnectionSubscription
  extends Promise<AsyncIterator<AuthUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AuthUser",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://172.16.105.231:26089/reuse/auth`
});
export const prisma = new Prisma();
