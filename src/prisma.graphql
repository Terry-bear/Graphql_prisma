type AggregateAuthUser {
  count: Int!
}

type AuthUser {
  id: ID!
  mobileNo: String
  idCard: String
  userName: String!
  email: String
  lastLoginDate: String
  lastResetDate: String
  name: String
  certifiedStatus: Int
  headpic: String
  kongKey: String
  kongId: String
  accessKey: String
  accessId: String
  passWord: String
  lesseeId: String
  wxopenId: String
}

type AuthUserConnection {
  pageInfo: PageInfo!
  edges: [AuthUserEdge]!
  aggregate: AggregateAuthUser!
}

input AuthUserCreateInput {
  mobileNo: String
  idCard: String
  userName: String!
  email: String
  lastLoginDate: String
  lastResetDate: String
  name: String
  certifiedStatus: Int
  headpic: String
  kongKey: String
  kongId: String
  accessKey: String
  accessId: String
  passWord: String
  lesseeId: String
  wxopenId: String
}

type AuthUserEdge {
  node: AuthUser!
  cursor: String!
}

enum AuthUserOrderByInput {
  id_ASC
  id_DESC
  mobileNo_ASC
  mobileNo_DESC
  idCard_ASC
  idCard_DESC
  userName_ASC
  userName_DESC
  email_ASC
  email_DESC
  lastLoginDate_ASC
  lastLoginDate_DESC
  lastResetDate_ASC
  lastResetDate_DESC
  name_ASC
  name_DESC
  certifiedStatus_ASC
  certifiedStatus_DESC
  headpic_ASC
  headpic_DESC
  kongKey_ASC
  kongKey_DESC
  kongId_ASC
  kongId_DESC
  accessKey_ASC
  accessKey_DESC
  accessId_ASC
  accessId_DESC
  passWord_ASC
  passWord_DESC
  lesseeId_ASC
  lesseeId_DESC
  wxopenId_ASC
  wxopenId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthUserPreviousValues {
  id: ID!
  mobileNo: String
  idCard: String
  userName: String!
  email: String
  lastLoginDate: String
  lastResetDate: String
  name: String
  certifiedStatus: Int
  headpic: String
  kongKey: String
  kongId: String
  accessKey: String
  accessId: String
  passWord: String
  lesseeId: String
  wxopenId: String
}

type AuthUserSubscriptionPayload {
  mutation: MutationType!
  node: AuthUser
  updatedFields: [String!]
  previousValues: AuthUserPreviousValues
}

input AuthUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthUserWhereInput
  AND: [AuthUserSubscriptionWhereInput!]
  OR: [AuthUserSubscriptionWhereInput!]
  NOT: [AuthUserSubscriptionWhereInput!]
}

input AuthUserUpdateInput {
  mobileNo: String
  idCard: String
  userName: String
  email: String
  lastLoginDate: String
  lastResetDate: String
  name: String
  certifiedStatus: Int
  headpic: String
  kongKey: String
  kongId: String
  accessKey: String
  accessId: String
  passWord: String
  lesseeId: String
  wxopenId: String
}

input AuthUserUpdateManyMutationInput {
  mobileNo: String
  idCard: String
  userName: String
  email: String
  lastLoginDate: String
  lastResetDate: String
  name: String
  certifiedStatus: Int
  headpic: String
  kongKey: String
  kongId: String
  accessKey: String
  accessId: String
  passWord: String
  lesseeId: String
  wxopenId: String
}

input AuthUserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mobileNo: String
  mobileNo_not: String
  mobileNo_in: [String!]
  mobileNo_not_in: [String!]
  mobileNo_lt: String
  mobileNo_lte: String
  mobileNo_gt: String
  mobileNo_gte: String
  mobileNo_contains: String
  mobileNo_not_contains: String
  mobileNo_starts_with: String
  mobileNo_not_starts_with: String
  mobileNo_ends_with: String
  mobileNo_not_ends_with: String
  idCard: String
  idCard_not: String
  idCard_in: [String!]
  idCard_not_in: [String!]
  idCard_lt: String
  idCard_lte: String
  idCard_gt: String
  idCard_gte: String
  idCard_contains: String
  idCard_not_contains: String
  idCard_starts_with: String
  idCard_not_starts_with: String
  idCard_ends_with: String
  idCard_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  lastLoginDate: String
  lastLoginDate_not: String
  lastLoginDate_in: [String!]
  lastLoginDate_not_in: [String!]
  lastLoginDate_lt: String
  lastLoginDate_lte: String
  lastLoginDate_gt: String
  lastLoginDate_gte: String
  lastLoginDate_contains: String
  lastLoginDate_not_contains: String
  lastLoginDate_starts_with: String
  lastLoginDate_not_starts_with: String
  lastLoginDate_ends_with: String
  lastLoginDate_not_ends_with: String
  lastResetDate: String
  lastResetDate_not: String
  lastResetDate_in: [String!]
  lastResetDate_not_in: [String!]
  lastResetDate_lt: String
  lastResetDate_lte: String
  lastResetDate_gt: String
  lastResetDate_gte: String
  lastResetDate_contains: String
  lastResetDate_not_contains: String
  lastResetDate_starts_with: String
  lastResetDate_not_starts_with: String
  lastResetDate_ends_with: String
  lastResetDate_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  certifiedStatus: Int
  certifiedStatus_not: Int
  certifiedStatus_in: [Int!]
  certifiedStatus_not_in: [Int!]
  certifiedStatus_lt: Int
  certifiedStatus_lte: Int
  certifiedStatus_gt: Int
  certifiedStatus_gte: Int
  headpic: String
  headpic_not: String
  headpic_in: [String!]
  headpic_not_in: [String!]
  headpic_lt: String
  headpic_lte: String
  headpic_gt: String
  headpic_gte: String
  headpic_contains: String
  headpic_not_contains: String
  headpic_starts_with: String
  headpic_not_starts_with: String
  headpic_ends_with: String
  headpic_not_ends_with: String
  kongKey: String
  kongKey_not: String
  kongKey_in: [String!]
  kongKey_not_in: [String!]
  kongKey_lt: String
  kongKey_lte: String
  kongKey_gt: String
  kongKey_gte: String
  kongKey_contains: String
  kongKey_not_contains: String
  kongKey_starts_with: String
  kongKey_not_starts_with: String
  kongKey_ends_with: String
  kongKey_not_ends_with: String
  kongId: String
  kongId_not: String
  kongId_in: [String!]
  kongId_not_in: [String!]
  kongId_lt: String
  kongId_lte: String
  kongId_gt: String
  kongId_gte: String
  kongId_contains: String
  kongId_not_contains: String
  kongId_starts_with: String
  kongId_not_starts_with: String
  kongId_ends_with: String
  kongId_not_ends_with: String
  accessKey: String
  accessKey_not: String
  accessKey_in: [String!]
  accessKey_not_in: [String!]
  accessKey_lt: String
  accessKey_lte: String
  accessKey_gt: String
  accessKey_gte: String
  accessKey_contains: String
  accessKey_not_contains: String
  accessKey_starts_with: String
  accessKey_not_starts_with: String
  accessKey_ends_with: String
  accessKey_not_ends_with: String
  accessId: String
  accessId_not: String
  accessId_in: [String!]
  accessId_not_in: [String!]
  accessId_lt: String
  accessId_lte: String
  accessId_gt: String
  accessId_gte: String
  accessId_contains: String
  accessId_not_contains: String
  accessId_starts_with: String
  accessId_not_starts_with: String
  accessId_ends_with: String
  accessId_not_ends_with: String
  passWord: String
  passWord_not: String
  passWord_in: [String!]
  passWord_not_in: [String!]
  passWord_lt: String
  passWord_lte: String
  passWord_gt: String
  passWord_gte: String
  passWord_contains: String
  passWord_not_contains: String
  passWord_starts_with: String
  passWord_not_starts_with: String
  passWord_ends_with: String
  passWord_not_ends_with: String
  lesseeId: String
  lesseeId_not: String
  lesseeId_in: [String!]
  lesseeId_not_in: [String!]
  lesseeId_lt: String
  lesseeId_lte: String
  lesseeId_gt: String
  lesseeId_gte: String
  lesseeId_contains: String
  lesseeId_not_contains: String
  lesseeId_starts_with: String
  lesseeId_not_starts_with: String
  lesseeId_ends_with: String
  lesseeId_not_ends_with: String
  wxopenId: String
  wxopenId_not: String
  wxopenId_in: [String!]
  wxopenId_not_in: [String!]
  wxopenId_lt: String
  wxopenId_lte: String
  wxopenId_gt: String
  wxopenId_gte: String
  wxopenId_contains: String
  wxopenId_not_contains: String
  wxopenId_starts_with: String
  wxopenId_not_starts_with: String
  wxopenId_ends_with: String
  wxopenId_not_ends_with: String
  AND: [AuthUserWhereInput!]
  OR: [AuthUserWhereInput!]
  NOT: [AuthUserWhereInput!]
}

input AuthUserWhereUniqueInput {
  id: ID
  mobileNo: String
  idCard: String
  userName: String
  email: String
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createAuthUser(data: AuthUserCreateInput!): AuthUser!
  updateAuthUser(data: AuthUserUpdateInput!, where: AuthUserWhereUniqueInput!): AuthUser
  updateManyAuthUsers(data: AuthUserUpdateManyMutationInput!, where: AuthUserWhereInput): BatchPayload!
  upsertAuthUser(where: AuthUserWhereUniqueInput!, create: AuthUserCreateInput!, update: AuthUserUpdateInput!): AuthUser!
  deleteAuthUser(where: AuthUserWhereUniqueInput!): AuthUser
  deleteManyAuthUsers(where: AuthUserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}


type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  authUser(where: AuthUserWhereUniqueInput!): AuthUser
  authUsers(where: AuthUserWhereInput, orderBy: AuthUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthUser]!
  authUsersConnection(where: AuthUserWhereInput, orderBy: AuthUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthUserConnection!
}

type Subscription {
  authUser(where: AuthUserSubscriptionWhereInput): AuthUserSubscriptionPayload
}
